//fcfs
#include <stdio.h>

int main(){
	float p;
	printf("Enter number of process\n");
	scanf("%f",&p);
	printf("Enter burst time");
	int bt[10],tat[20],wt[20];
	int i;
	for(i=0;i<p;i++)
	{
		scanf("%d",&bt[i]);
	}
	tat[0]=bt[0];
	wt[0]=0;
	float totalwait=0,totaltat=bt[0];
	//float tot_tat;
	for(i=1;i<p;i++)
	{
		wt[i]=tat[i-1];
		totalwait+=wt[i];
		tat[i]=tat[i-1]+bt[i];
		totaltat+=tat[i];
	}
	float tot_wt=(float)totalwait/p;
	float tot_tat=(float)totaltat/p;
	printf("Process no.\t\tBurst Time\t\tWaiting time\t\tTat time\n");
	for(int i=0;i<p;i++)
	{
		printf("p%d\t\t%d\t\t%d\t\t%d\n",i+1,bt[i],wt[i],tat[i]);
	}
	printf("Avg wait and tat are %f %f",tot_wt,tot_tat);
	
	return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------
//sjf
#include <stdio.h>

int main(){
	float p;
	printf("Enter number of process\n");
	scanf("%f",&p);
	printf("Enter burst time");
	int bt[10],tat[20],wt[20],pr[10];
	int i;
	for(i=0;i<p;i++)
	{
		scanf("%d",&bt[i]);
		pr[i]=i+1;
	}
	int j=0;
	for(i=0;i<p;i++)
	{
		int pos=i;
	    for(j=i+1;j<p;j++)
	    {
	        if(bt[pos]>bt[j])
	        {
	        	pos=j;
	            
	        }
	    }
	    int temp=bt[pos];
        bt[pos]=bt[i];
	    bt[i]=temp;
	    temp=pr[pos];
	    pr[pos]=pr[i];
	    pr[i]=temp;
	}
	
	tat[0]=bt[0];
	wt[0]=0;
	float totalwait=0,totaltat=bt[0];
	//float tot_tat;
	for(i=1;i<p;i++)
	{
		wt[i]=tat[i-1];
		totalwait+=wt[i];
		tat[i]=tat[i-1]+bt[i];
		totaltat+=tat[i];
	}
	float tot_wt=(float)totalwait/p;
	float tot_tat=(float)totaltat/p;
	printf("Process no.\t\tBurst Time\t\tWaiting time\t\tTat time\n");
	for(int i=0;i<p;i++)
	{
		printf("p%d\t\t%d\t\t%d\t\t%d\n",pr[i],bt[i],wt[i],tat[i]);
	}
	printf("Avg wait and tat are %f %f",tot_wt,tot_tat);
	
	return 0;
}
------------------------------------------------------------------------------------------------------------------------------------
//roundrobin
#include<stdio.h>

int main() {
    int st[10], bt[10], wt[10], tat[10], n, tq;
    int i, count = 0, swt = 0, stat = 0, temp, sq = 0;
    float awt, atat;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the burst time of each process: \n");
    for (i = 0; i < n; i++) {
        printf("p%d: ", i + 1);
        scanf("%d", &bt[i]);
        st[i] = bt[i];
    }

    printf("Enter the time quantum: ");
    scanf("%d", &tq);

    while (1) {
        for (i = 0, count = 0; i < n; i++) {
            temp = tq;
            if (st[i] == 0) {
                count++;
                continue;
            }
            if (st[i] > tq) {
                st[i] -= tq;
            } else if (st[i] >= 0) {
                temp = st[i];
                st[i] = 0;
            }
            sq += temp;
            tat[i] = sq;
        }
        if (n == count) break;
    }

    for (i = 0; i < n; i++) {
        wt[i] = tat[i] - bt[i];
        swt += wt[i];
        stat += tat[i];
    }

    awt = (float)swt / n;
    atat = (float)stat / n;

    printf("Process no\t Burst time\t Waiting time\t Turnaround time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t %d\t\t %d\t\t %d\n", i + 1, bt[i], wt[i], tat[i]);
    }

    printf("Avg waiting time = %f, Avg turnaround time = %f\n", awt, atat);

    return 0;
}
----------------------------------------------------------------------------------------------------------------------
//priority
#include <stdio.h>

int main(){
	float p;
	printf("Enter number of process\n");
	scanf("%f",&p);
	printf("Enter burst time");
	int bt[10],tat[20],wt[20],pr[10];
	int i;
	for(i=0;i<p;i++)
	{
		scanf("%d",&bt[i]);
		pr[i]=i+1;
	}
	printf("Enter priority of process");
	int pri[20];
	for(i=0;i<p;i++)
	{
	    scanf("%d",&pri[i]);
	}
	int j=0;
	for(i=0;i<p;i++)
	{
	    for(j=i+1;j<p;j++)
	    {
	        if(pri[i]>pri[j])
	        {
	            int temp=pr[i];
	            pr[i]=pr[j];
	            pr[j]=temp;
	            
	            temp=bt[i];
	            bt[i]=bt[j];
	            bt[j]=temp;
	            
	            temp=pri[i];
	            pri[i]=pri[j];
	            pri[j]=temp;
	            
	        }
	    }
	}
	tat[0]=bt[0];
	wt[0]=0;
	float totalwait=0,totaltat=bt[0];
	//float tot_tat;
	for(i=1;i<p;i++)
	{
		wt[i]=tat[i-1];
		totalwait+=wt[i];
		tat[i]=tat[i-1]+bt[i];
		totaltat+=tat[i];
	}
	float tot_wt=(float)totalwait/p;
	float tot_tat=(float)totaltat/p;
	printf("Process no.\t\tBurst Time\t\tWaiting time\t\tTat time\t\tpriority\n");
	for(int i=0;i<p;i++)
	{
		printf("p%d\t\t%d\t\t%d\t\t%d\t\t%d\n",pr[i],bt[i],wt[i],tat[i],pri[i]);
		
	}
	printf("Avg wait and tat are %f %f",tot_wt,tot_tat);
	
	return 0;
}
----------------------------------------------------------------------------------------------------------------------
//bankers
#include <stdio.h>

int max[10][10], alloc[10][10], need[10][10], avail[10], i, j, p, r, finish[10] = {0}, flag = 0;

void fun() {
    while (1) {
        for (flag = 0, i = 0; i < p; i++) {
            if (finish[i] == 0) {
                int can_be_allocated = 1;
                for (j = 0; j < r; j++) {
                    if (need[i][j] > avail[j]) {
                        can_be_allocated = 0;
                        break;
                    }
                }
                if (can_be_allocated) {
                    for (j = 0; j < r; j++) {
                        avail[j] += alloc[i][j];
                    }
                    flag = 1;
                    finish[i] = 1;
                }
            }
        }
        if (flag == 0) {
            break;
        }
    }
}

int main() {
    printf("\nSIMULATION OF DEADLOCK PREVENTION\n");
    printf("Enter no. of processes, resources: ");
    scanf("%d%d", &p, &r);

    printf("\nEnter allocation matrix:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    printf("\nEnter max matrix:\n");
    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    printf("\nEnter available matrix:\n");
    for (i = 0; i < r; i++) {
        scanf("%d", &avail[i]);
    }

    for (i = 0; i < p; i++) {
        for (j = 0; j < r; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    fun(); // Call the deadlock prevention function

    int all_finished = 1;
    for (i = 0; i < p; i++) {
        if (finish[i] == 0) {
            all_finished = 0;
            break;
        }
    }

    if (all_finished) {
        printf("\nNo Deadlock Detected. All processes can complete safely.\n");
    } else {
        printf("\nDeadlock Prevented.\n");
    }

    return 0;
}
-----------------------------------------------------------------------------------
//producerconsumer
//producerr
#include <stdio.h>
#include <stdlib.h>

int mutex = 1, full = 0, empty = 3, x = 0;

int main() {
    int n;
    void producer();
    void consumer();
    int wait(int);
    int signal(int);

    printf("\n1. Producer\n2. Consumer\n3. Exit");
    while (1) {
        printf("\nEnter your choice: ");
        scanf("%d", &n);
        switch (n) {
            case 1:
                if ((mutex == 1) && (empty != 0))
                    producer();
                else
                    printf("Buffer is full!!");
                break;
            case 2:
                if ((mutex == 1) && (full != 0))
                    consumer();
                else
                    printf("Buffer is empty!!");
                break;
            case 3:
                exit(0);
                break;
        }
    }
    return 0;
}

int wait(int s) {
    return (--s);
}

int signal(int s) {
    return (++s);
}

void producer() {
    mutex = wait(mutex);
    full = signal(full);
    empty = wait(empty);
    x++;
    printf("\nProducer produces the item %d", x);
    mutex = signal(mutex);
}

void consumer() {
    mutex = wait(mutex);
    full = wait(full);
    empty = signal(empty);
    printf("\nConsumer consumes item %d", x);
    x--;
    mutex = signal(mutex);
}
--------------------------------------------------------------------------------------
//segmentation
#include <stdio.h>
#include <stdlib.h>

struct list {
    int seg;
    int base;
    int limit;
    struct list* next;
} *p;

void insert(struct list* q, int base, int limit, int seg) {
    if (p == NULL) {
        p = (struct list*)malloc(sizeof(struct list));
        p->limit = limit;
        p->base = base;
        p->seg = seg;
        p->next = NULL;
    } else {
        while (q->next != NULL) {
            q = q->next;
        }
        q->next = (struct list*)malloc(sizeof(struct list));
        q->next->limit = limit;
        q->next->base = base;
        q->next->seg = seg;
        q->next->next = NULL;
    }
}

int find(struct list* q, int seg) {
    while (q->seg != seg) {
        q = q->next;
    }
    return q->limit;
}

int search(struct list* q, int seg) {
    while (q->seg != seg) {
        q = q->next;
    }
    return q->base;
}

int main() {
    p = NULL;
    int seg, offset, limit, base, c, s, physical;
    printf("Enter segment table\n");
    printf("Enter -1 as segment value for termination\n");

    do {
        printf("Enter segment number: ");
        scanf("%d", &seg);
        if (seg != -1) {
            printf("Enter base value: ");
            scanf("%d", &base);
            printf("Enter value for limit: ");
            scanf("%d", &limit);
            insert(p, base, limit, seg);
        }
    } while (seg != -1);

    printf("Enter offset: ");
    scanf("%d", &offset);
    printf("Enter segment number: ");
    scanf("%d", &seg);
    c = find(p, seg);
    s = search(p, seg);

    if (offset < c) {
        physical = s + offset;
        printf("Address in physical memory: %d\n", physical);
    } else {
        printf("Error: Offset exceeds segment limit.\n");
    }

    return 0;
}
---------------------------------------------------------------------------------------------
//paging
#include <stdio.h>
#include <conio.h>

int main() {
    int ms, ps, nop, np, rempages, i, j, x, y, pa, offset;
    int s[10], fno[10][20];

    printf("\nEnter the memory size -- ");
    scanf("%d", &ms);
    printf("\nEnter the page size -- ");
    scanf("%d", &ps);
    nop = ms / ps;
    printf("\nThe no. of pages available in memory are -- %d ", nop);
    printf("\nEnter number of processes -- ");
    scanf("%d", &np);
    rempages = nop;

    for (i = 1; i <= np; i++) {
        printf("\nEnter no. of pages required for p[%d]-- ", i);
        scanf("%d", &s[i]);
        if (s[i] > rempages) {
            printf("\nMemory is Full");
            break;
        }
        rempages = rempages - s[i];
        printf("\nEnter pagetable for p[%d] --- ", i);
        for (j = 0; j < s[i]; j++)
            scanf("%d", &fno[i][j]);
    }

    printf("\nEnter Logical Address to find Physical Address ");
    printf("\nEnter process no. and pagenumber and offset -- ");
    scanf("%d %d %d", &x, &y, &offset);

    if (x > np || y >= s[x] || offset >= ps - 1 || x < 1 || y < 0 || offset < 0) {
        printf("\nInvalid Process or Page Number or offset");
    } else {
        pa = fno[x][y] * ps + offset;
        printf("\nThe Physical Address is -- %d", pa);
    }

    getch();
    return 0;
}




----------------------------------------------------------------------------------










//opencloseread dir
#include<stdio.h>
#include<fcntl.h>
#include<dirent.h
>main()
{
char d[10];
int c,op; DIR *e;
struct dirent *sd;
printf("**menu**\n1.create dir\n2.remove dir\n 3.read dir\n enter ur choice");
scanf("%d",&op);
switch(op)
{
case 1:
printf("enter dir name\n");
scanf("%s",&d);
c=mkdir(d,777);
if(c==1)
printf("dir is not
created"); else
printf("dir is created"); break;
case 2: printf("enter dir name\n");
scanf("%s",&d); c=rmdir(d);
if(c==1)
printf("dir is not
removed"); else
printf("dir is removed"); break;
case 3: printf("enter dir name to
open"); scanf("%s",&d);
e=opendir(d);
if(e==NULL)
printf("dir does not exist"); else
{
printf("dir exist\n"); while((sd=readdir(e))!=NULL) printf("%s\t",sd->d_name);
}
closedir(e)
; break;
}
}
------------------------------------------------------
//seek
#include<stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include
<sys/types.h>
int main()
{
int file=0;
if((file=open("testfile.txt",O_RDONLY)) < -1)
return 1;
char buffer[19]; if(read(file,buffer,19)
!= 19) return 1;printf("%s\n",buffer);
if(lseek(file,10,SEEK_SET) < 0) return 1;
if(read(file,buffer,19) != 19) return 1;
printf("%s\n",buffer);
return 0;
}
------------------------------------------------
//openreadwriteclose sys call
#include<sys/stat.h>
#include<stdio.h>
#include<fcntl.h>
#include<sys/types.h
> int main()
{
int
n,i=0;
int f1,f2;
char c,strin[100];
f1=open("data",O_RDWR|O_CREAT|O_TRUNC)
; while((c=getchar())!='\n')
{
strin[i++]=c;
}
strin[i]='\0';
write(f1,strin,i)
; close(f1);
f2=open("data",O_RDONLY);
read(f2,strin,0);
printf("\n%s\n",strin);
close(f2);
return 0;
}
